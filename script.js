function getLimitKey(row) {
  // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á –ª–∏–º–∏—Ç–∞: –∫–æ–ª–æ–Ω–∫—É, –≥–¥–µ –µ—Å—Ç—å "–î–æ"
  for (let key in row) {
    if (key.toLowerCase().includes("–¥–æ")) return key;
  }
  return null;
}

function getRate(type, value, data, column) {
  const candidates = data.filter(r => r["–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏"]?.trim() === type);
  console.log(`üîç –ò—â—É "${type}" –ø—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ ${value}`);
  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:`, candidates);
  for (let row of candidates) {
    const limitKey = getLimitKey(row);
    const limit = parseFloat((row[limitKey] || "").replace(/[^\d.,]/g, "").replace(",", "."));
    const rate = parseFloat(row[column]);
    console.log(`‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏: –ª–∏–º–∏—Ç=${limit}, —Ç–∞—Ä–∏—Ñ=${rate}`);
    if (!isNaN(limit) && value <= limit && !isNaN(rate)) {
      console.log(`‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç: ${type} | –õ–∏–º–∏—Ç: ${limit} | –¢–∞—Ä–∏—Ñ: ${rate}`);
      return rate;
    }
  }
  console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è "${type}" –ø—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ ${value}`);
  return null;
}

function runCalculation() {
  const model = document.getElementById("model").value;
  const country = document.getElementById("country").value;
  const column = getColumn(country);
  const currency = getCurrency(country);
  const city = document.getElementById("city").value;
  const weight = parseFloat(document.getElementById("weight").value);
  const length = parseFloat(document.getElementById("length").value);
  const quantity = parseInt(document.getElementById("quantity").value);
  const orders = parseInt(document.getElementById("orders").value);
  const storageDays = parseInt(document.getElementById("storageDays").value) || 0;
  const declaredValue = parseFloat(document.getElementById("declaredValue").value) || 0;
  const express = document.getElementById("express").checked;

  fetch("https://script.google.com/macros/s/AKfycbzlnU77HvUMHMW41fGuKl1-gQ3k6s_qSzDYQ_t1IlTu85GGHEtMDSP3Gwm2KX5IPMSZ/exec")
    .then(res => res.json())
    .then(data => {
      console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:", data);
      const rows = [];

      const rcp = getRate("–ü—Ä–∏–µ–º–∫–∞", weight, data, column);
      if (rcp !== null) rows.push({ name: "–ü—Ä–∏–µ–º–∫–∞", quantity, rate: rcp, total: rcp * quantity });

      if (model === "FBO") {
        const prep = getRate("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞", length, data, column);
        if (prep !== null) rows.push({ name: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞", quantity, rate: prep, total: prep * quantity });
      }

      if (storageDays > 0) {
        const store = getRate("–•—Ä–∞–Ω–µ–Ω–∏–µ", weight, data, column);
        if (store !== null) rows.push({
          name: "–•—Ä–∞–Ω–µ–Ω–∏–µ",
          quantity: quantity * storageDays,
          rate: store,
          total: store * quantity * storageDays
        });
      }

      const first = (city === "–ú–æ—Å–∫–≤–∞" || city === "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥") ? 120 : 80;
      const assembly = express
        ? 240 + (quantity - 1) * 26
        : first + Math.max(0, weight - 5) * 13;
      rows.push({ name: express ? "–≠–∫—Å–ø—Ä–µ—Å—Å-—Å–±–æ—Ä–∫–∞" : "–°–±–æ—Ä–∫–∞", quantity: orders, rate: assembly, total: assembly * orders });

      if (declaredValue > 0) {
        const rate = declaredValue * 0.0001;
        rows.push({ name: "–°–±–æ—Ä –∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å", quantity, rate, total: rate * quantity });
      }

      if (model === "FBS") {
        const delivery = getRate("–î–æ—Å—Ç–∞–≤–∫–∞", weight, data, column);
        if (delivery !== null) rows.push({ name: "–î–æ—Å—Ç–∞–≤–∫–∞", quantity: 1, rate: delivery, total: delivery });
      }

      const total = rows.reduce((sum, r) => sum + r.total, 0);
      let html = '<table><tr><th>–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏</th><th>–ö–æ–ª-–≤–æ</th><th>–¢–∞—Ä–∏—Ñ</th><th>–ò—Ç–æ–≥–æ</th></tr>';
      rows.forEach(r => {
        html += `<tr><td>${r.name}</td><td>${r.quantity}</td><td>${r.rate} ${currency}</td><td>${r.total.toFixed(2)} ${currency}</td></tr>`;
      });
      html += `</table><p><strong>–û–±—â–∞—è —Å—É–º–º–∞: ${total.toFixed(2)} ${currency}</strong></p>`;
      document.getElementById("result").innerHTML = html;
    });
}

function downloadExcel() {
  let table = document.querySelector("#result table");
  if (!table) return alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç");
  let wb = XLSX.utils.table_to_book(table);
  XLSX.writeFile(wb, "fulfillment.xlsx");
}
